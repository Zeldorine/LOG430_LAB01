/* * ATM Example system - file Simulation.java * * copyright (c) 2001 - Russell C. Bjork * */package edu.gordon.simulation;import java.awt.Frame;import java.awt.Menu;import java.awt.MenuBar;import java.awt.MenuItem;import java.awt.MenuShortcut;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;/** * Simulation of the physical components of the ATM, including its network * connection to the bank. An instance is created at startup by either the application's main() program or the applet's init() method. The individual components are displayed in a panel belonging to class SimGUI. The bank is simulated by an object belonging to class SimulatedBank. The constructor for this class creates one instance of each. The static method getInstance() allows components of the ATM to access the one and only instance of this class in order to simulate various operations. The remaining methods simulate specific operations of the ATM, and are forwarded to either the SimGUI panel or the simulated bank to actually carry them out. */public class Simulation {    public Simulation(SimOperatorPanel operatorPanel, SimCardReader cardReader, SimDisplay display,            SimKeyboard keyboard, SimCashDispenser cashDispenser, SimEnvelopeAcceptor envelopeAcceptor,            SimReceiptPrinter receiptPrinter) {        this.display = (SimDisplay)display;        this.operatorPanel = (SimOperatorPanel)operatorPanel;        this.cardReader = (SimCardReader)cardReader;        this.keyboard = (SimKeyboard)keyboard;        this.cashDispenser = (SimCashDispenser)cashDispenser;                // Create the SimGUI containing the above        gui = new SimGUI(operatorPanel, cardReader, display, keyboard,                cashDispenser, envelopeAcceptor, receiptPrinter);                theInstance = this;    }        public void initScreen(){                // Create the frame that will display the simulated ATM, and add the        // SimGUI edu.gordon.simulation to it        Frame mainFrame = new Frame("ATM Simulation");        mainFrame.add(getGUI());        // Arrange for a file menu with a Quit option, plus quit on window close        MenuBar menuBar = new MenuBar();        Menu fileMenu = new Menu("File");        MenuItem quitItem = new MenuItem("Quit", new MenuShortcut('Q'));        quitItem.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                System.exit(0);            }        });        fileMenu.add(quitItem);        menuBar.add(fileMenu);        mainFrame.setMenuBar(menuBar);        mainFrame.addWindowListener(new WindowAdapter() {            public void windowClosing(WindowEvent e) {                System.exit(0);            }        });        // Pack the SimGUI frame, show it, and off we go!        mainFrame.setResizable(false);        mainFrame.pack();        mainFrame.setVisible(true);    }        /**     * Accessor for the one and only instance of this class     *     * @return the instance of this class     */    public static Simulation getInstance() {        return theInstance;    }    /**     * Simulated getting initial amount of cash from operator     *     * @return value of initial cash entered     */    public int getInitialCash() {        return gui.getInitialCash();    }    /**     * Simulate reading of a card     *     *     * @return Card object representing information on the card if read     * successfully, null if not read successfully     */    public Integer readCard() {        // Machine can't be turned off while there is a card in it        operatorPanel.setEnabled(false);        cardReader.animateInsertion();        // Since we don't have a magnetic stripe reader, we'll simulate by        // having customer type the card number in        return gui.readCard();    }    /**     * Simulate ejecting a card     */    public void ejectCard() {        cardReader.animateEjection();        // Re-enable on-off switch        operatorPanel.setEnabled(true);    }    /**     * Simulate retaining a card     */    public void retainCard() {        cardReader.animateRetention();        // Re-enable on-off switch        operatorPanel.setEnabled(true);    }    /**     * Clear the simulated display     */    public void clearDisplay() {        display.clearDisplay();    }    /**     * Write one or more lines to the display - beginning just after the last     * line written     *     * @param text the text to display     */    public void display(String text) {        display.display(text);    }    void switchChanged(boolean on) {        cardReader.setVisible(on);    }        /**     * Simulate reading input from the keyboard     *     * @param mode the input mode to use - one of the constants defined below.     * @param maxValue the maximum acceptable value (used in MENU_MODE only)     * @return the line that was entered - null if user pressed CANCEL.     */    public String readInput(int mode, int maxValue) {        return keyboard.readInput(mode, maxValue);    }    /**     * Simulate dispensing cash to a customer     *     * @param amount the amount of cash to dispense     *     * Precondition: amount is <= cash on hand     */    public void dispenseCash(String amount) {        cashDispenser.animateDispensingCash(amount);    }    /**     * Simulate printing a line to the log     *     * @param text the line to print     */    public void printLogLine(String text) {        gui.printLogLine(text);    }    /**     * Accessor for SimGUI Panel that simulates the ATM     *     * @return the SimGUI Panel     */    public SimGUI getGUI() {        return gui;    }    /* Possible values for mode parameter to readInput() */    /**     * Read input in PIN mode - allow user to enter several characters, and to     * clear the line if the user wishes; echo as asterisks     */    public static final int PIN_MODE = 1;    /**     * Read input in amount mode - allow user to enter several characters, and     * to clear the line if the user wishes; echo what use types     */    public static final int AMOUNT_MODE = 2;    /**     * Read input in menu choice mode - wait for one digit key to be pressed,     * and return value immediately.     */    public static final int MENU_MODE = 3;    /**     * The simulated operator panel     */    private SimOperatorPanel operatorPanel;    /**     * The simulated card reader     */    private SimCardReader cardReader;    /**     * The simulated display     */    private SimDisplay display;    /**     * The simulated keyboard     */    private SimKeyboard keyboard;    /**     * The simulated cash dispenser     */    private SimCashDispenser cashDispenser;    /**     * Panel containing the SimGUI that simulates the ATM     */    private SimGUI gui;    /**     * The one and only instance of this class     */    private static Simulation theInstance;    /**     * Time to wait to simulate communication with the bank     */    public static int timeToWait = 2 * 1000;    public static void setTimeToWait(int simulation, int receipt, int cashDispenser) {        timeToWait = simulation;        SimReceiptPrinter.timeToWait = receipt;        SimCashDispenser.timeToWait = cashDispenser;        SimEnvelopeAcceptor.MAXIMUM_WAIT_TIME = 200;    }}
/* * ATM Example system - file SimCardReader.java * * copyright (c) 2001 - Russell C. Bjork * */package edu.gordon.simulation;import edu.gordon.event.CardEvent;import com.google.common.eventbus.EventBus;import edu.gordon.core.CardReader;import java.awt.Button;import java.awt.Rectangle;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;/** * Simulate the card reader */public class SimCardReader extends Button implements CardReader {    /**     * Constructor     *     * @param edu.gordon.simulation the Simulation object     */    SimCardReader(final EventBus eventBus) {        super("Click to insert card");        addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                eventBus.post(new CardEvent(Boolean.TRUE));            }        });        // Not available until machine is turned on        setVisible(false);    }    /**     * Animate card going into the machine     */    void animateInsertion() {        originalBounds = getBounds();        Rectangle currentBounds                = new Rectangle(originalBounds.x, originalBounds.y,                        originalBounds.width, originalBounds.height);        while (currentBounds.width > 0 && currentBounds.height > 0) {            setBounds(currentBounds.x, currentBounds.y,                    currentBounds.width, currentBounds.height);            repaint();            try {                Thread.sleep(100);            } catch (InterruptedException e) {            }            currentBounds.height -= 1;            currentBounds.width                    = (originalBounds.width * currentBounds.height) / originalBounds.height;            currentBounds.x                    = originalBounds.x + (originalBounds.width - currentBounds.width) / 2;            currentBounds.y                    = originalBounds.y + (originalBounds.height - currentBounds.height) / 2;        }        setVisible(false);    }    /**     * Animate ejecting the card that is currently inside the reader.     */    void animateEjection() {        setLabel("Ejecting card");        setVisible(true);        Rectangle currentBounds                = new Rectangle(originalBounds.x + originalBounds.width / 2,                        originalBounds.y + originalBounds.height / 2,                        originalBounds.width / originalBounds.height, 1);        while (currentBounds.height <= originalBounds.height                && currentBounds.width <= originalBounds.width) {            setBounds(currentBounds.x, currentBounds.y,                    currentBounds.width, currentBounds.height);            repaint();            try {                Thread.sleep(100);            } catch (InterruptedException e) {            }            currentBounds.height += 1;            currentBounds.width                    = (originalBounds.width * currentBounds.height) / originalBounds.height;            currentBounds.x                    = originalBounds.x + (originalBounds.width - currentBounds.width) / 2;            currentBounds.y                    = originalBounds.y + (originalBounds.height - currentBounds.height) / 2;        }        setLabel("Click to insert card");    }    /**     * Animate retaining the card that is currently inside the reader for action     * by the bank.     */    void animateRetention() {        setLabel("Click to insert card");        setVisible(true);    }    /**     * To animate card insertion/ejection, we change the bounds of this button.     * These are the original bounds we ultimately restore to     */    private Rectangle originalBounds;    public Integer readCard() {        return Simulation.getInstance().readCard();    }    public void ejectCard() {        Simulation.getInstance().ejectCard();    }    public void retainCard() {        Simulation.getInstance().retainCard();    }}
/* * ATM Example system - file Transaction.java    * * copyright (c) 2001 - Russell C. Bjork * */package edu.gordon.transaction;import edu.gordon.banking.Balances;import edu.gordon.banking.Card;import edu.gordon.banking.Message;import edu.gordon.banking.Money;import edu.gordon.banking.Receipt;import edu.gordon.exception.Cancelled;/** * Abstract base class for classes representing the various kinds of transaction * the ATM can perform */public abstract class Transaction {    /**     * Get serial number of this transaction     *     * @return serial number     */    public int getSerialNumber() {        return serialNumber;    }        public static String[] getTrxMenu(){        return TRANSACTION_TYPES_MENU;    }        public abstract boolean needFromAccount();        public abstract boolean needToAccount();         public abstract boolean needAmount();        public abstract boolean needDispanceAmount();        public abstract boolean needAcceptEnvelope();        public abstract Message getEnvelopeAcceptMessage();    /**     * Get specifics for the transaction from the customer - each subclass must     * implement this appropriately.     *     * @return message to bank for initiating this transaction     * @exception CustomerConsole.Cancelled if customer cancelled this     * transaction     */    public abstract Message getSpecificsFromCustomer(int from, int to, Money amount) throws Cancelled;    /**     * Complete an approved transaction - each subclass must implement this     * appropriately.     *     * @return receipt to be printed for this transaction     * @exception CustomerConsole.Cancelled if customer cancelled this     * transaction     */    public abstract Receipt completeTransaction() throws Cancelled;    /**     * Customer card for the session this transaction is part of     */    protected Card card;    /**     * PIN entered or re-entered by customer     */    protected int pin;    /**     * Serial number of this transaction     */    protected int serialNumber;    /**     * Message to bank describing this transaction     */    protected Message message;    protected Receipt receipt;    /**     * Used to return account balances from the bank     */    protected Balances balances;    /**     * List of available transaction types to display as a menu     */    private static final String[] TRANSACTION_TYPES_MENU            = {"Withdrawal", "Deposit", "Transfer", "Balance Inquiry"};    /**     * Next serial number - used to assign a unique serial number to each     * transaction     */    protected static int nextSerialNumber = 1;    /**     * The current state of the transaction     */    protected int state;    // Possible values for state    /**     * Getting specifics of the transaction from customer     */    protected static final int GETTING_SPECIFICS_STATE = 1;    /**     * Sending transaction to bank     */    protected static final int SENDING_TO_BANK_STATE = 2;    /**     * Performing invalid PIN extension     */    protected static final int INVALID_PIN_STATE = 3;    /**     * Completing transaction     */    protected static final int COMPLETING_TRANSACTION_STATE = 4;    /**     * Printing receipt     */    protected static final int PRINTING_RECEIPT_STATE = 5;    /**     * Asking if customer wants to do another transaction     */    protected static final int ASKING_DO_ANOTHER_STATE = 6;    /**     * Time to wait to simulate communication with the bank     */    public static int timeToWait = 5000;    protected int atmId;    protected String bankName;    protected String atmPlace;    public Balances getBalances() {        return balances;    }}